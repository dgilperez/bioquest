// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// User & Authentication
// ============================================================================

model User {
  id                  String    @id @default(cuid())
  inatId              Int       @unique
  inatUsername        String    @unique
  name                String?
  icon                String?
  email               String?   @unique
  location            String?   // User's primary location (city, state, country)
  region              String?   // Normalized region code (e.g., "US-CA", "UK")
  onboardingCompleted Boolean   @default(false) // Track if user completed onboarding
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  stats         UserStats?
  badges        UserBadge[]
  quests        UserQuest[]
  observations  Observation[]
  sessions      Session[]
  accounts      Account[]
  friendships   Friendship[] @relation("UserFriendships")
  friendOf      Friendship[] @relation("FriendOf")
  trips         Trip[]
  taxonProgress UserTaxonProgress[]
  syncProgress  SyncProgress?

  @@index([inatId])
  @@index([inatUsername])
  @@index([region])
  @@map("users")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// iNaturalist Observations (Cached)
// ============================================================================

model Observation {
  id              Int      @id
  userId          String
  speciesGuess    String?
  taxonId         Int?
  taxonName       String?
  taxonRank       String?
  commonName      String?
  observedOn      DateTime
  qualityGrade    QualityGrade
  photosCount     Int      @default(0)
  location        String?
  placeGuess      String?
  iconicTaxon     String?
  rarity          Rarity   @default(common)
  globalCount     Int?
  regionalCount   Int?
  isFirstGlobal   Boolean  @default(false)
  isFirstRegional Boolean  @default(false)
  pointsAwarded   Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  trips TripObservation[]

  @@index([userId])
  @@index([taxonId])
  @@index([rarity])
  @@index([observedOn])
  // Composite indexes for common query patterns
  @@index([userId, createdAt])
  @@index([userId, iconicTaxon])
  @@index([userId, qualityGrade])
  @@index([userId, rarity])
  @@index([userId, observedOn])
  // Quest progress optimization indexes
  @@index([userId, createdAt, taxonId])      // For species_count queries
  @@index([userId, createdAt, taxonName])    // For taxon_observation queries
  @@index([userId, createdAt, qualityGrade]) // For quality_grade queries
  @@index([userId, createdAt, placeGuess])   // For location_variety queries
  @@map("observations")
}

enum QualityGrade {
  research
  needs_id
  casual
}

enum Rarity {
  common
  uncommon
  rare
  epic
  legendary
  mythic
}

// ============================================================================
// User Statistics (Denormalized for Performance)
// ============================================================================

model UserStats {
  id                    String    @id @default(cuid())
  userId                String    @unique
  totalObservations     Int       @default(0)
  totalSpecies          Int       @default(0)
  totalPoints           Int       @default(0)
  level                 Int       @default(1)
  pointsToNextLevel     Int       @default(100)
  rareObservations      Int       @default(0)
  legendaryObservations Int       @default(0)
  currentStreak         Int       @default(0)
  longestStreak         Int       @default(0)
  lastObservationDate   DateTime?

  // Rarity streaks (consecutive rare+ observations)
  currentRarityStreak    Int       @default(0)
  longestRarityStreak    Int       @default(0)
  lastRareObservationDate DateTime?

  lastSyncedAt          DateTime? // Track when we last synced to enable incremental sync

  // Leaderboard stats (reset periodically)
  weeklyPoints          Int       @default(0)
  monthlyPoints         Int       @default(0)
  weekStart             DateTime? // Start of current week period
  monthStart            DateTime? // Start of current month period

  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([level])
  @@index([totalPoints])
  @@index([weeklyPoints])
  @@index([monthlyPoints])
  // Composite indexes for leaderboard queries (sort + filter)
  @@index([weeklyPoints, userId])
  @@index([monthlyPoints, userId])
  @@index([totalPoints, userId])
  @@map("user_stats")
}

// ============================================================================
// Badges & Achievements
// ============================================================================

model Badge {
  id          String        @id @default(cuid())
  code        String        @unique // e.g., "first_100_observations"
  name        String
  description String
  category    BadgeCategory
  tier        BadgeTier?
  iconUrl     String?
  criteria    Json          // Flexible criteria storage
  isSecret    Boolean       @default(false)
  sortOrder   Int           @default(0)
  createdAt   DateTime      @default(now())

  userBadges UserBadge[]

  @@index([category])
  @@index([tier])
  @@map("badges")
}

enum BadgeCategory {
  milestone
  taxon
  rarity
  geography
  time
  challenge
  secret
}

enum BadgeTier {
  bronze
  silver
  gold
  platinum
}

model UserBadge {
  id         String   @id @default(cuid())
  userId     String
  badgeId    String
  progress   Int      @default(100) // 0-100 for multi-tier badges
  unlockedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([unlockedAt])
  @@map("user_badges")
}

// ============================================================================
// Quests & Challenges
// ============================================================================

model Quest {
  id          String    @id @default(cuid())
  code        String    @unique // e.g., "daily_2025_01_21"
  title       String
  description String
  type        QuestType
  startDate   DateTime
  endDate     DateTime
  criteria    Json      // Quest-specific criteria
  reward      Json      // { points, badge, etc }
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  userQuests UserQuest[]

  @@index([type])
  @@index([startDate])
  @@index([endDate])
  @@index([isActive])
  @@index([type, startDate]) // For generating quests by type and period
  @@index([endDate, isActive]) // For finding active/expired quests
  @@map("quests")
}

enum QuestType {
  daily
  weekly
  monthly
  personal
  event
}

model UserQuest {
  id          String      @id @default(cuid())
  userId      String
  questId     String
  status      QuestStatus @default(active)
  progress    Int         @default(0) // 0-100
  startedAt   DateTime    @default(now())
  completedAt DateTime?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest Quest @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@unique([userId, questId])
  @@index([userId])
  @@index([status])
  @@index([userId, status])     // For filtering active quests per user
  @@index([userId, questId, status]) // For quest assignment checks
  @@map("user_quests")
}

enum QuestStatus {
  active
  completed
  expired
}

// ============================================================================
// Friendships & Social Features
// ============================================================================

model Friendship {
  id        String           @id @default(cuid())
  userId    String
  friendId  String
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user   User @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
  @@index([status])
  @@map("friendships")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

// ============================================================================
// Places & Exploration (Cached)
// ============================================================================

model Place {
  id           Int      @id // iNaturalist place ID
  name         String
  displayName  String
  placeType    Int?
  latitude     Float    // Calculated center latitude
  longitude    Float    // Calculated center longitude
  bboxArea     Float?

  // Cached species data
  totalSpecies        Int      @default(0)
  recentObservations  Int      @default(0) // Last 30 days
  cachedAt            DateTime @default(now())

  // Track usage
  queriedCount Int      @default(0)
  lastQueriedAt DateTime @default(now())

  // Relations
  trips Trip[]

  @@index([latitude, longitude])
  @@index([totalSpecies])
  @@index([cachedAt])
  @@map("places")
}

// ============================================================================
// Trip Journal & Exploration
// ============================================================================

model Trip {
  id          String      @id @default(cuid())
  userId      String
  placeId     Int?        // Reference to Place model (null if custom location)

  // Trip metadata
  title       String      // e.g., "Morning Bird Walk at Central Park"
  description String?     // User's notes/goals for the trip
  status      TripStatus  @default(planned)

  // Timing
  plannedDate DateTime?   // When user plans to go
  startedAt   DateTime?   // When trip actually started (check-in)
  completedAt DateTime?   // When trip ended

  // Location (fallback if placeId is null)
  customLocationName String?
  customLatitude     Float?
  customLongitude    Float?

  // Trip conditions (recorded during/after trip)
  weather     String?     // e.g., "Sunny, 65°F"
  conditions  String?     // e.g., "Muddy trails, high wind"
  notes       String?     // Post-trip journal entry

  // Gamification metadata (calculated on completion)
  newSpeciesFound     Int      @default(0)
  totalObservations   Int      @default(0)
  pointsEarned        Int      @default(0)
  rarityHighlight     Rarity?  // Highest rarity found
  completionScore     Float?   // % of target species found (0-100)

  // Social (Phase 2)
  isPublic            Boolean  @default(false)
  shareUrl            String?  @unique

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  place           Place?            @relation(fields: [placeId], references: [id])
  observations    TripObservation[] // Observations made during this trip
  targetSpecies   TripTarget[]      // Species user wanted to find
  achievements    TripAchievement[] // Badges/achievements earned

  @@index([userId])
  @@index([placeId])
  @@index([status])
  @@index([plannedDate])
  @@index([startedAt])
  @@map("trips")
}

enum TripStatus {
  planned      // User created trip but hasn't started
  in_progress  // User checked in, trip is active
  completed    // Trip finished, observations synced
  cancelled    // User cancelled planned trip
}

// Target species for a trip (what user wants to find)
model TripTarget {
  id          String   @id @default(cuid())
  tripId      String
  taxonId     Int
  taxonName   String
  commonName  String?
  iconicTaxon String?
  priority    Int      @default(0) // 1-5, user-defined importance

  // Achievement tracking
  spotted     Boolean  @default(false)
  spottedAt   DateTime?

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, taxonId])
  @@index([tripId])
  @@map("trip_targets")
}

// Link observations to trips (many-to-many)
model TripObservation {
  id             String   @id @default(cuid())
  tripId         String
  observationId  Int      // References Observation.id
  isTargetSpecies Boolean @default(false) // Was this a target?
  addedAt        DateTime @default(now())

  trip        Trip         @relation(fields: [tripId], references: [id], onDelete: Cascade)
  observation Observation  @relation(fields: [observationId], references: [id], onDelete: Cascade)

  @@unique([tripId, observationId])
  @@index([tripId])
  @@index([observationId])
  @@map("trip_observations")
}

// Achievements earned during specific trips
model TripAchievement {
  id           String   @id @default(cuid())
  tripId       String
  type         TripAchievementType
  title        String
  description  String
  metadata     Json?    // Achievement-specific data
  earnedAt     DateTime @default(now())

  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([type])
  @@map("trip_achievements")
}

enum TripAchievementType {
  first_visit          // First time at this location
  return_visitor       // 2nd+ visit to location
  season_master        // Visited in all 4 seasons
  target_complete      // Found all target species
  rarity_hunter        // Found mythic/legendary during trip
  early_bird           // Trip before 8am
  night_owl            // Trip after 8pm
  weather_warrior      // Trip in challenging conditions
  species_surge        // 20+ species in one trip
  photo_master         // All observations have 3+ photos
}

// ============================================================================
// Tree of Life - Taxonomic Exploration
// ============================================================================

// Cached taxon nodes from iNaturalist taxonomy
model TaxonNode {
  id               Int       @id // iNaturalist taxon ID
  name             String
  rank             String    // kingdom, phylum, class, order, family, genus, species
  parentId         Int?      // Parent taxon ID
  ancestorIds      String?   // JSON array of ancestor IDs [kingdom, phylum, class, ...]

  // Metadata
  commonName       String?
  iconicTaxonName  String?   // Animalia, Plantae, etc.
  isActive         Boolean   @default(true)

  // Global stats (cached from iNat)
  globalObsCount   Int       @default(0)
  globalSpeciesCount Int?    // Number of species under this taxon

  // Cache metadata
  cachedAt         DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  userProgress     UserTaxonProgress[]
  regionalData     RegionalTaxonData[]

  @@index([rank])
  @@index([parentId])
  @@index([iconicTaxonName])
  @@index([cachedAt])
  @@map("taxon_nodes")
}

// User's progress per taxon (species observed, completeness %)
model UserTaxonProgress {
  id               String    @id @default(cuid())
  userId           String
  taxonId          Int
  rank             String    // Level at which we're tracking (order, family, etc.)

  // Observation counts
  observationCount Int       @default(0)
  speciesCount     Int       @default(0)  // Unique species observed under this taxon

  // Completeness tracking
  regionId         Int?      // iNat place ID for region (null = worldwide)
  completionPercent Float    @default(0.0) // % of regional species observed

  // Metadata
  lastObservedAt   DateTime?
  updatedAt        DateTime  @updatedAt

  // Relations
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  taxon            TaxonNode @relation(fields: [taxonId], references: [id])

  @@unique([userId, taxonId, regionId])
  @@index([userId])
  @@index([taxonId])
  @@index([completionPercent])
  @@map("user_taxon_progress")
}

// Regional taxon statistics (cached from iNat)
model RegionalTaxonData {
  id                  String    @id @default(cuid())
  placeId             Int       // iNaturalist place ID
  placeName           String
  taxonId             Int
  rank                String

  // Regional statistics
  rgObservationCount  Int       @default(0) // Research-grade observations in region
  speciesCount        Int       @default(0) // Species observed in region
  observerCount       Int       @default(0) // Number of unique observers

  // Cache metadata
  cachedAt            DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  taxon               TaxonNode @relation(fields: [taxonId], references: [id])

  @@unique([placeId, taxonId])
  @@index([placeId])
  @@index([taxonId])
  @@index([cachedAt])
  @@map("regional_taxon_data")
}

// ============================================================================
// Sync Progress Tracking (Persistent)
// ============================================================================

model SyncProgress {
  userId                 String      @id
  status                 String      // 'idle' | 'syncing' | 'completed' | 'error'
  phase                  String      // 'fetching' | 'enriching' | 'storing' | 'calculating' | 'done'
  currentStep            Int         @default(0)
  totalSteps             Int         @default(4)
  message                String      @default("")
  observationsProcessed  Int         @default(0)
  observationsTotal      Int         @default(0)
  estimatedTimeRemaining Int?        // seconds
  error                  String?
  lastObservationDate    DateTime?   // Last observation date synced (resume point)
  startedAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  completedAt            DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([updatedAt])
  @@map("sync_progress")
}
