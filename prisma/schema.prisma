// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// User & Authentication
// ============================================================================

model User {
  id            String    @id @default(cuid())
  inatId        Int       @unique
  inatUsername  String    @unique
  name          String?
  icon          String?
  email         String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  stats         UserStats?
  badges        UserBadge[]
  quests        UserQuest[]
  observations  Observation[]
  sessions      Session[]
  accounts      Account[]

  @@index([inatId])
  @@index([inatUsername])
  @@map("users")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// iNaturalist Observations (Cached)
// ============================================================================

model Observation {
  id              Int      @id
  userId          String
  speciesGuess    String?
  taxonId         Int?
  taxonName       String?
  taxonRank       String?
  commonName      String?
  observedOn      DateTime
  qualityGrade    QualityGrade
  photosCount     Int      @default(0)
  location        String?
  placeGuess      String?
  iconicTaxon     String?
  rarity          Rarity   @default(normal)
  globalCount     Int?
  regionalCount   Int?
  isFirstGlobal   Boolean  @default(false)
  isFirstRegional Boolean  @default(false)
  pointsAwarded   Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([taxonId])
  @@index([rarity])
  @@index([observedOn])
  @@map("observations")
}

enum QualityGrade {
  research
  needs_id
  casual
}

enum Rarity {
  normal
  rare
  legendary
}

// ============================================================================
// User Statistics (Denormalized for Performance)
// ============================================================================

model UserStats {
  id                    String    @id @default(cuid())
  userId                String    @unique
  totalObservations     Int       @default(0)
  totalSpecies          Int       @default(0)
  totalPoints           Int       @default(0)
  level                 Int       @default(1)
  pointsToNextLevel     Int       @default(100)
  rareObservations      Int       @default(0)
  legendaryObservations Int       @default(0)
  currentStreak         Int       @default(0)
  longestStreak         Int       @default(0)
  lastObservationDate   DateTime?
  lastSyncedAt          DateTime? // Track when we last synced to enable incremental sync
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([level])
  @@index([totalPoints])
  @@map("user_stats")
}

// ============================================================================
// Badges & Achievements
// ============================================================================

model Badge {
  id          String        @id @default(cuid())
  code        String        @unique // e.g., "first_100_observations"
  name        String
  description String
  category    BadgeCategory
  tier        BadgeTier?
  iconUrl     String?
  criteria    Json          // Flexible criteria storage
  isSecret    Boolean       @default(false)
  sortOrder   Int           @default(0)
  createdAt   DateTime      @default(now())

  userBadges UserBadge[]

  @@index([category])
  @@index([tier])
  @@map("badges")
}

enum BadgeCategory {
  milestone
  taxon
  rarity
  geography
  time
  challenge
  secret
}

enum BadgeTier {
  bronze
  silver
  gold
  platinum
}

model UserBadge {
  id         String   @id @default(cuid())
  userId     String
  badgeId    String
  progress   Int      @default(100) // 0-100 for multi-tier badges
  unlockedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([unlockedAt])
  @@map("user_badges")
}

// ============================================================================
// Quests & Challenges
// ============================================================================

model Quest {
  id          String    @id @default(cuid())
  code        String    @unique // e.g., "daily_2025_01_21"
  title       String
  description String
  type        QuestType
  startDate   DateTime
  endDate     DateTime
  criteria    Json      // Quest-specific criteria
  reward      Json      // { points, badge, etc }
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  userQuests UserQuest[]

  @@index([type])
  @@index([startDate])
  @@index([endDate])
  @@index([isActive])
  @@map("quests")
}

enum QuestType {
  daily
  weekly
  monthly
  personal
  event
}

model UserQuest {
  id          String      @id @default(cuid())
  userId      String
  questId     String
  status      QuestStatus @default(active)
  progress    Int         @default(0) // 0-100
  startedAt   DateTime    @default(now())
  completedAt DateTime?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest Quest @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@unique([userId, questId])
  @@index([userId])
  @@index([status])
  @@map("user_quests")
}

enum QuestStatus {
  active
  completed
  expired
}

// ============================================================================
// Leaderboards (Future - may use materialized views instead)
// ============================================================================

// model Leaderboard {
//   id        String   @id @default(cuid())
//   type      String   // "global", "regional", "taxon"
//   period    String   // "all_time", "monthly", "weekly"
//   filter    Json?    // Additional filters
//   data      Json     // Cached leaderboard data
//   updatedAt DateTime @updatedAt
//
//   @@unique([type, period])
//   @@map("leaderboards")
// }
